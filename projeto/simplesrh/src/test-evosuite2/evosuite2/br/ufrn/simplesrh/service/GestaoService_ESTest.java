/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 22:10:37 GMT 2024
 */

package evosuite2.br.ufrn.simplesrh.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.ufrn.simplesrh.dao.FuncionarioDAO;
import br.ufrn.simplesrh.model.Funcionario;
import br.ufrn.simplesrh.service.GestaoService;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GestaoService_ESTest extends GestaoService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.ofYearDay((-124), 1);
      Funcionario funcionario0 = new Funcionario("{g", "l$vbj;2ur9.jt\"l8<", (-124), localDate0, (-124));
      linkedList0.add(funcionario0);
      gestaoService0.reajustarSalarioPorCargo("l$vbj;2ur9.jt\"l8<", 1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2301L);
      Funcionario funcionario0 = new Funcionario("'Uj", "-):", (-1167.7781092), localDate0, 100);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2301L);
      Funcionario funcionario0 = new Funcionario("8}*ruk", "uQtd=oa2PJwL$kI(uZ", (-1554.483133166347), localDate0, 70);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals((-233.17246997495204), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario("xjw\"g", "uQtd=oa2PJwL$kI(uZ", (-3235.02279186), localDate0, 69);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals((-323.502279186), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2301L);
      Funcionario funcionario0 = new Funcionario("uQtd=oa2PJwL$kI(uZ", "9", (-2874.1), localDate0, 50);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals((-287.41), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario((String) null, "OL-:Kk/<", 0.0, localDate0, 49);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      Funcionario funcionario0 = new Funcionario();
      double double0 = gestaoService0.calcularReajusteSalarial(funcionario0, (-1256.7914612));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      Funcionario funcionario0 = new Funcionario(", ", "aK9I7Q3&KGBY5c$[", 1.0, (-1256));
      funcionario0.setSalario((-2063.403));
      double double0 = gestaoService0.calcularReajusteSalarial(funcionario0, 1520.9964);
      assertEquals((-33447.688347491996), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      Funcionario funcionario0 = new Funcionario(", ", "aK9I7Q3&KGBY5c$[", 1.0, (-1256));
      funcionario0.setSalario((-2081.5662233293606));
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals((-104.07831116646804), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GestaoService gestaoService0 = new GestaoService((FuncionarioDAO) null);
      // Undeclared exception!
      try { 
        gestaoService0.reajustarSalarioPorCargo("nome: , cargo: nome: , sal\u00E1rio: -1405.731199164, admissao: 2014-02-14, desempenho: 0", 2721.675);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.simplesrh.service.GestaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GestaoService gestaoService0 = new GestaoService((FuncionarioDAO) null);
      // Undeclared exception!
      try { 
        gestaoService0.calcularReajusteSalarial((Funcionario) null, 1932.4118133);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.simplesrh.service.GestaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GestaoService gestaoService0 = new GestaoService((FuncionarioDAO) null);
      // Undeclared exception!
      try { 
        gestaoService0.calcularBonusPorDesempenho((Funcionario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.simplesrh.service.GestaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      Funcionario funcionario0 = new Funcionario("jwSC", "jwSC", 1043, 1043);
      linkedList0.add(funcionario0);
      gestaoService0.reajustarSalarioPorCargo("jwSC", 1043);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      LocalDate localDate0 = MockLocalDate.ofEpochDay(2301L);
      Funcionario funcionario0 = new Funcionario("", "", 0.0, localDate0, 60);
      linkedList0.add(funcionario0);
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      gestaoService0.reajustarSalarioPorCargo("8u>62e  X4Uhvk_y", 0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GestaoService gestaoService0 = new GestaoService((FuncionarioDAO) null);
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario((String) null, "xjw\"g", 1932.4118133, localDate0, 90);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(386.48236266000004, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario(", ", "Tqt_~>RU BA}Nm|", 1222.48610403875, localDate0, 1091);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(565L);
      Funcionario funcionario0 = new Funcionario("b^k[&'", "xjw\"g", 1932.4118133, localDate0, 89);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(289.86177199499997, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GestaoService gestaoService0 = new GestaoService((FuncionarioDAO) null);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Funcionario funcionario0 = new Funcionario("ukF<AcU", "ukF<AcU", (-1701.912), localDate0, (-2040109463));
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.ofEpochDay(565L);
      Funcionario funcionario0 = new Funcionario("b^k[&'", "xjw\"g", 1932.4118133, localDate0, 89);
      double double0 = gestaoService0.calcularReajusteSalarial(funcionario0, 1932.4118133);
      assertEquals(39274.56597511394, double0, 0.01);
  }
}
