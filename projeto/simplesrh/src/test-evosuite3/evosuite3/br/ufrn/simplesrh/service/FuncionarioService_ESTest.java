/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 22:15:04 GMT 2024
 */

package evosuite3.br.ufrn.simplesrh.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.ufrn.simplesrh.dao.FuncionarioDAO;
import br.ufrn.simplesrh.model.Funcionario;
import br.ufrn.simplesrh.service.FuncionarioService;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.LinkedList;
import java.util.List;
import java.util.Optional;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FuncionarioService_ESTest extends FuncionarioService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn((List<Funcionario>) null).when(funcionarioDAO0).todos();
      FuncionarioService funcionarioService0 = new FuncionarioService(funcionarioDAO0);
      List<Funcionario> list0 = funcionarioService0.todos();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      FuncionarioService funcionarioService0 = new FuncionarioService(funcionarioDAO0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Funcionario funcionario0 = new Funcionario("&RW?-gi`v<", "Analista", (-3833.5803967), localDate0, (-4326));
      linkedList0.offerLast(funcionario0);
      List<Funcionario> list0 = funcionarioService0.todos();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FuncionarioService funcionarioService0 = new FuncionarioService((FuncionarioDAO) null);
      // Undeclared exception!
      try { 
        funcionarioService0.todos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.simplesrh.service.FuncionarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FuncionarioService funcionarioService0 = new FuncionarioService((FuncionarioDAO) null);
      // Undeclared exception!
      try { 
        funcionarioService0.remover("lista de funcion\u00E1rios:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.simplesrh.service.FuncionarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn((List<Funcionario>) null).when(funcionarioDAO0).todos();
      FuncionarioService funcionarioService0 = new FuncionarioService(funcionarioDAO0);
      // Undeclared exception!
      try { 
        funcionarioService0.listar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FuncionarioService funcionarioService0 = new FuncionarioService((FuncionarioDAO) null);
      // Undeclared exception!
      try { 
        funcionarioService0.buscarPorNome("|$rYJ!oFXQC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.simplesrh.service.FuncionarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FuncionarioService funcionarioService0 = new FuncionarioService((FuncionarioDAO) null);
      // Undeclared exception!
      try { 
        funcionarioService0.adicionar((Funcionario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.simplesrh.service.FuncionarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      FuncionarioService funcionarioService0 = new FuncionarioService(funcionarioDAO0);
      List<Funcionario> list0 = funcionarioService0.todos();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn((List) null).when(funcionarioDAO0).todos();
      FuncionarioService funcionarioService0 = new FuncionarioService(funcionarioDAO0);
      // Undeclared exception!
      try { 
        funcionarioService0.listar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      FuncionarioService funcionarioService0 = new FuncionarioService(funcionarioDAO0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Funcionario funcionario0 = new Funcionario("&RW?-gi`v<", "Analista", (-3833.5803967), localDate0, (-4326));
      linkedList0.offerLast(funcionario0);
      funcionarioService0.listar();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      FuncionarioService funcionarioService0 = new FuncionarioService(funcionarioDAO0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      LocalDate localDate0 = MockLocalDate.now((ZoneId) zoneOffset0);
      Funcionario funcionario0 = new Funcionario("&RW?-gi`v<", "Analista", (-3833.5803967), localDate0, (-4326));
      funcionarioService0.adicionar(funcionario0);
      assertEquals("&RW?-gi`v<", funcionario0.getNome());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario();
      FuncionarioService funcionarioService0 = new FuncionarioService((FuncionarioDAO) null);
      // Undeclared exception!
      try { 
        funcionarioService0.adicionar(funcionario0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cargo inv\u00E1lido: null. Os cargos permitidos s\u00E3o: [Analista, Desenvolvedor, Gerente, Coordenador]
         //
         verifyException("br.ufrn.simplesrh.service.FuncionarioService", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      FuncionarioService funcionarioService0 = new FuncionarioService(funcionarioDAO0);
      funcionarioService0.remover("&RW?-gi`v<");
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      FuncionarioService funcionarioService0 = new FuncionarioService(funcionarioDAO0);
      Optional<Funcionario> optional0 = funcionarioService0.buscarPorNome("Analista");
      assertNotNull(optional0);
  }
}
