/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 15 21:35:02 GMT 2024
 */

package evosuite1.br.ufrn.simplesrh.service;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import br.ufrn.simplesrh.dao.FuncionarioDAO;
import br.ufrn.simplesrh.model.Funcionario;
import br.ufrn.simplesrh.service.GestaoService;
import java.time.Clock;
import java.time.LocalDate;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockClock;
import org.evosuite.runtime.mock.java.time.MockLocalDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class GestaoService_ESTest extends GestaoService_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Funcionario funcionario0 = new Funcionario(", Admissao: ", ", Admissao: ", 0.0, localDate0, 100);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario("80>tH26LO-')O", (String) null, (-1.0), localDate0, 89);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals((-0.15), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario("", "", (-4172.314), localDate0, 50);
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals((-417.23140000000006), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario("(@gFM", "Pontua\u00E7\u00E3o de desempenho inv\u00E1lida. A pontua\u00E7\u00E3o deve ser entre 0 e 100.", (-3444.019), localDate0, 49);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals((-172.20095), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      Funcionario funcionario0 = new Funcionario();
      double double0 = gestaoService0.calcularReajusteSalarial(funcionario0, 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      Funcionario funcionario0 = new Funcionario();
      funcionario0.setSalario((-2864.0660821663));
      double double0 = gestaoService0.calcularReajusteSalarial(funcionario0, 1762.821191066352);
      assertEquals((-53352.42990473767), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario(",!", ",!", 1.0, 0);
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(0.05, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      Funcionario funcionario0 = new Funcionario();
      linkedList0.add(funcionario0);
      // Undeclared exception!
      try { 
        gestaoService0.reajustarSalarioPorCargo(", Admissao: ", 892.858157);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      // Undeclared exception!
      try { 
        gestaoService0.calcularReajusteSalarial((Funcionario) null, (-3264.7));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.simplesrh.service.GestaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GestaoService gestaoService0 = new GestaoService((FuncionarioDAO) null);
      // Undeclared exception!
      try { 
        gestaoService0.calcularBonusPorDesempenho((Funcionario) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("br.ufrn.simplesrh.service.GestaoService", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Funcionario funcionario0 = new Funcionario(", Admissao: ", ", Admissao: ", 0.0, localDate0, 100);
      linkedList0.add(funcionario0);
      gestaoService0.reajustarSalarioPorCargo(", Admissao: ", 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      LocalDate localDate0 = MockLocalDate.ofYearDay(100, 100);
      Funcionario funcionario0 = new Funcionario("Erro ao carregar o arquivo JSON: ", "jjI*s[:{$w", 1.0, localDate0, (-2084692141));
      linkedList0.add(funcionario0);
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      gestaoService0.reajustarSalarioPorCargo("jjI*s[:{$w", (-1343.0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<Funcionario> linkedList0 = new LinkedList<Funcionario>();
      Funcionario funcionario0 = new Funcionario(",!", ",!", 1.0, 0);
      linkedList0.addFirst(funcionario0);
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      doReturn(linkedList0).when(funcionarioDAO0).todos();
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      gestaoService0.reajustarSalarioPorCargo((String) null, 635.67);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario(", Admissao: ", ", Admissao: ", 0.0, localDate0, 90);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario("b~C]3+7ae'9(#KP%-", "2N/", 0, localDate0, 70);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Clock clock0 = MockClock.systemDefaultZone();
      LocalDate localDate0 = MockLocalDate.now(clock0);
      Funcionario funcionario0 = new Funcionario(",!", "O funcion\u00E1rio %s (%s) tem menos de um ano de empresa. Nenhum reajuste aplicado.%n", (-1340.89982), localDate0, 69);
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals((-134.08998200000002), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      LocalDate localDate0 = MockLocalDate.now();
      Funcionario funcionario0 = new Funcionario("n^=", "n^=", 679, localDate0, 679);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      LocalDate localDate0 = MockLocalDate.ofYearDay(100, 100);
      Funcionario funcionario0 = new Funcionario("Erro ao carregar o arquivo JSON: ", "jjI*s[:{$w", 1.0, localDate0, (-2084692141));
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      double double0 = gestaoService0.calcularBonusPorDesempenho(funcionario0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Funcionario funcionario0 = new Funcionario(",!", ",!", 1.0, 0);
      FuncionarioDAO funcionarioDAO0 = mock(FuncionarioDAO.class, new ViolatedAssumptionAnswer());
      GestaoService gestaoService0 = new GestaoService(funcionarioDAO0);
      double double0 = gestaoService0.calcularReajusteSalarial(funcionario0, 202);
      assertEquals(3.02, double0, 0.01);
  }
}
